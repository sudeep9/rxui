package daisyui

import (
    "strings"
	"github.com/sudeep9/rxui"
)

type TabStyle string 
type TabSize string

const (
    TabStyleLift TabStyle = "tabs-lift"
    TabStyleBox  TabStyle = "tabs-box"
    TabStyleLine TabStyle = "tabs-line"

    TabSizeXtraSmall TabSize = "tabs-xs"
    TabSizeSmall TabSize = "tabs-sm"
    TabSizeMedium TabSize = "tabs-md"
    TabSizeLarge TabSize = "tabs-lg"
    TabSizeXtraLarge TabSize = "tabs-xl"
)

type Tabs struct {
    Name string
    TabStyle TabStyle
    Size TabSize
}

templ (t Tabs) Tabs(attrlist ...templ.KeyValue[string, any]) {
    {{
        classes := []string{"tabs"}

        tabStyle := TabStyleLift
        if string(t.TabStyle) != "" {
            tabStyle = t.TabStyle
            classes = append(classes, string(tabStyle))
        }

        tabSize := TabSizeMedium
        if string(t.Size) != "" {
            tabSize = t.Size
            classes = append(classes, string(tabSize))
        }

        attrs := rxui.MergeClass(strings.Join(classes, " "), attrlist...)
    }}
    <div {attrs...}>
        {children...}
    </div>
}

templ (t Tabs) Tab(isChecked bool, attrlist ...templ.KeyValue[string, any]) {
    {{
        attrs := rxui.MergeClass("tab flex", attrlist...)
        var inputAttrs templ.OrderedAttributes
        if isChecked {
            inputAttrs = append(inputAttrs, rxui.IsChecked())
        }
    }}
    <label {attrs...}>
        <input type="radio" name={t.Name} {inputAttrs...}/>
        {children...}
    </label>
}


templ (t Tabs) TabContent(attrlist ...templ.KeyValue[string, any]) {
    {{
        attrs := rxui.MergeClass("tab-content", attrlist...)
    }}
    <div {attrs...}>
        {children...}
    </div>
}